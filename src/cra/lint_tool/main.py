import json
import subprocess
import pathlib
from datetime import datetime
from cra.lint_tool.py_linters import run_py_linters, has_python
from cra.lint_tool.js_linters import run_js_linters, has_javascript, get_js_issues


def run_linters(file_path: str) -> str:
    path = pathlib.Path(file_path)
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    # Initialize outputs
    py_report = ""
    js_report = ""

    # Run Python linters if Python files are present
    if has_python(path):
        py_report = run_py_linters(file_path)

    # Run JavaScript linters if JavaScript files are present
    if has_javascript(path):
        js_report = run_js_linters(file_path)

    # Build the unified report
    report = f"""# Linting Report

- **Path**: `{file_path}`
- **Generated on**: {timestamp}

"""

    # Add Python sections if Python files were analyzed
    if has_python(path):
        # Extract the content between the header and footer
        py_lines = py_report.split("\n")
        # Find the start of the actual content (after the initial header)
        content_start = 0
        for i, line in enumerate(py_lines):
            if line.startswith("## "):  # First section header
                content_start = i
                break

        # Find the end of the content (before the footer)
        content_end = len(py_lines)
        for i in range(len(py_lines) - 1, -1, -1):
            if py_lines[i].startswith("*Report generated by CRA*"):
                content_end = i
                break

        # Add Python section header and content
        report += "## Python Linting Results\n\n"
        if content_start > 0 and content_end < len(py_lines):
            py_content = "\n".join(py_lines[content_start:content_end])
            report += py_content + "\n\n"

    # Add JavaScript sections if JavaScript files were analyzed
    if has_javascript(path):
        # Extract the content between the header and footer
        js_lines = js_report.split("\n")
        # Find the start of the actual content (after the initial header)
        content_start = 0
        for i, line in enumerate(js_lines):
            if line.startswith("## "):  # First section header
                content_start = i
                break

        # Find the end of the content (before the footer)
        content_end = len(js_lines)
        for i in range(len(js_lines) - 1, -1, -1):
            if js_lines[i].startswith("*Report generated by CRA*"):
                content_end = i
                break

        # Add JavaScript section header and content
        report += "## JavaScript Linting Results\n\n"
        if content_start > 0 and content_end < len(js_lines):
            js_content = "\n".join(js_lines[content_start:content_end])
            report += js_content + "\n\n"

    report += """
---
*Report generated by CRA*
"""

    return report


def save_report(report, output_file):
    with open(output_file, "w", encoding="utf-8") as f:
        f.write(report)
