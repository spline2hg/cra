import subprocess
from datetime import datetime
import pathlib


def has_python(path: pathlib.Path) -> bool:
    """Check if the path contains Python files."""
    if path.is_file():
        return path.suffix == ".py"
    elif path.is_dir():
        for file_path in path.rglob("*.py"):
            return True
    return False


def run_linter(command, path):
    """Run linter command and return output."""
    try:
        result = subprocess.run(
            command + [path], capture_output=True, text=True, timeout=30
        )
        return (
            result.stdout if result.returncode == 0 or result.stdout else result.stderr
        )
    except Exception as e:
        return f"Error running {' '.join(command)}: {str(e)}"


def run_vulture(path):
    """Run vulture to detect dead code."""
    try:
        result = subprocess.run(
            ["vulture", path, "--min-confidence", "80"],
            capture_output=True,
            text=True,
            timeout=30,
        )
        return result.stdout if result.stdout else "No dead code detected."
    except Exception as e:
        return f"Error running vulture: {str(e)}"


def run_radon_complexity(path):
    """Run radon to analyze code complexity."""
    try:
        result = subprocess.run(
            ["radon", "cc", path, "-s"], capture_output=True, text=True, timeout=30
        )
        return result.stdout if result.stdout else "No complexity issues found."
    except Exception as e:
        return f"Error running radon complexity: {str(e)}"


def run_radon_maintainability(path):
    """Run radon to analyze maintainability index."""
    try:
        result = subprocess.run(
            ["radon", "mi", path, "-s"], capture_output=True, text=True, timeout=30
        )
        return result.stdout if result.stdout else "No maintainability issues found."
    except Exception as e:
        return f"Error running radon maintainability: {str(e)}"


def run_py_linters(file_path):
    """Run all Python linters and return formatted markdown report."""
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    # Run basic linters
    pylint_output = run_linter(["pylint"], file_path)
    flake8_output = run_linter(["flake8"], file_path)
    bandit_output = run_linter(["bandit", "-r"], file_path)

    # Run more linters
    vulture_output = run_vulture(file_path)
    radon_complexity_output = run_radon_complexity(file_path)
    radon_maintainability_output = run_radon_maintainability(file_path)

    return f"""# Linting Report

- **Path**: `{file_path}`
- **Generated on**: {timestamp}

## Pylint Output

```
{pylint_output or "No output or errors occurred."}
```

## Flake8 Output

```
{flake8_output or "No output or errors occurred."}
```

## Bandit Output

```
{bandit_output or "No output or errors occurred."}
```

## Vulture Output (Dead Code Detection)

```
{vulture_output or "No dead code detected."}
```

## Radon Complexity Analysis

```
{radon_complexity_output or "No complexity issues found."}
```

## Radon Maintainability Index

```
{radon_maintainability_output or "No maintainability issues found."}
```

---
*Report generated by CRA*
"""
